
def executingUser=''
def configBuildTagSource=''
def pushedConfigHash=''



pipeline{
  //agent any
  agent {node {label 'linux'}}
  options{
    buildDiscarder(
      logRotator(daysToKeepStr: '5', numToKeepStr: '5')
    )
    disableConcurrentBuilds()
  }

parameters {

        extendedChoice( 
            name: 'TagName', 
            defaultValue: '', 
            description: 'tag name', 
            type: 'PT_SINGLE_SELECT', 
            groovyScript: """def gettags = ("git ls-remote -t git@github.com:oelalami/Hello.git").execute()
               return gettags.text.readLines().collect { it.split()[1].replaceAll('refs/tags/', '').replaceAll("\\\\^\\\\{\\\\}", '')}
                          """,)
        extendedChoice(           
            name: 'BranchName', 
            defaultValue: '', 
            description: 'Branch name', 
            type: 'PT_SINGLE_SELECT', 
            groovyScript: """def getbranch = ("git ls-remote -h git@github.com:oelalami/Hello.git").execute()
               return getbranch.text.readLines().collect { it.split()[1].replaceAll('refs/heads/', '').replaceAll("\\\\^\\\\{\\\\}", '')}
                          """,)
    }

  

  environment{
      def GENERATED_BUILD_TAG=''
  }

  stages{
    stage('parameterBuild'){
      when{ expression{params.SkipRun}}
      steps{
        script{
          echo 'Setting job parameters'
        }
      }
    }
    stage('Tag Name '){
      when{ expression{!params.SkipRun}}
      stages{

        stage('test'){
          steps{
            script{
              echo "running on tag ${TagName}"
          
                 }
            }
          }
        stage('connexion ssh'){
          steps{
            sshagent (credentials: ['WSL']) {
            //sh ' echo ${BranchName};git checkout ${BranchName} ; cd /home/en03845/Hello/Projetjava ;javac hello.java;java hello'
            sh 'hostname'
            sh 'cd /home/en03845/Hello/Projetjava;git fetch ; git fetch --tags ;git status ; git merge --ff-only ${TagName};javac hello.java;java hello'
            
       
        
         
            }
          }
        }
      }//run stages
      post{
        success{
          script{
            env.GENERATED_BUILD_TAG=build_tag
          }
        }
      }
    }//stage run
  }//job stages
}//pipeline

def getUserNameFromCause(currentBuild){
  def userCause
  try{
    userCause=currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
    if (userCause==null || userCause.size()<1){
      return ''
    }
    userCause=userCause[0]
  }catch(all){
    return ''
  }
  return userCause.userName!=null?"${userCause.userName}":''
}
